/**
  * @author Ram Saran Vuppuluri
  *
  *         This file contains  example of a simple class definition along with various basic operations that can be
  *         performed on classes.
  */
package buildingBlocks.classes

/*
 Below line is the signature for SimpePerson class.

 Signature contains name of the class along with various attributes associated with the class.

 Attributes of class can be of var/ val/ private or None(nothing) access specifiers

 If an attribute is declared as var both getters and setters are automatically generated by Scala.

 If an attribute is declared as val only getter is automatically generated by Scala.

 If an attribute is declared as private neither getter or setter are automatically generated by Scala.

 If no value is passed by the constructor call default values will be utilized.

 All the code declared in the class definition will be executed when a new instance of class is created. There are
 couple of exceptions for this:
 1. Auxiliary constructor - Overloaded constructor
 2. variable declares as lazy.
 */
class SimplePerson(var firstName: String = "", var lastName: String = "", private val ssn: BigInt = SimplePerson
  .DEFAULT_SSN,
                   private var currentCity: String = SimplePerson.DEFAULT_CURRENT_CITY) {
  println("Constructor Begins")

  var age = 0

  /*
  This is overridden implementation of default toString method
   */
  override def toString: String = s"$firstName $lastName is of age: $age and his/her SSN: $ssn and lives in $currentCity"

  def printSimplePerson(): Unit = println(this)

  printSimplePerson

  /*
  "lazy" will make sure this code block is not executed when instance is created instead will be executed when
  attribute is called by instance.
   */
  lazy val lazyprintSimplePerson: Unit = {
    println("This is lazy invocation of ")
    println(this)
  }

  def getSsn: BigInt = {
    this.ssn
  }

  def setCurrentCity(currentCityIn: String): Unit = {
    this.currentCity = currentCityIn
  }

  def getCurrentCity: String = {
    this.currentCity
  }

  /*
  Auxiliary constructor for SimplePerson class
   */
  def this(firstName: String, lastName: String) {
    this(firstName, lastName, SimplePerson.DEFAULT_SSN, SimplePerson.DEFAULT_CURRENT_CITY)
  }

  println("Constructor Ends")
}

/*
 Companion object for SimplePerson class. Companion object is an object sharing the same name of the class and is
 present in the same source code file. Companion objects are used to declare constants or static attributes utilized
 by class.
 */
object SimplePerson {
  val DEFAULT_SSN = BigInt(0)
  val DEFAULT_CURRENT_CITY = "Miami"
}

object SimplePersonDriver {
  def main(args: Array[String]): Unit = {
    var simplePerson = new SimplePerson("Frank", "Underwood", BigInt(1234567890), "New Yprk")
    simplePerson.age = 40
    simplePerson.printSimplePerson
    simplePerson.lazyprintSimplePerson
    println(simplePerson)
    simplePerson.setCurrentCity("Washington")
    println(simplePerson)

    simplePerson = new SimplePerson("Dexter", "Morgan")
    simplePerson.age = 30
    println(simplePerson)

  }
}
